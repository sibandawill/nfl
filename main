#!/usr/bin/env python3
"""
NFL Game Predictor with Supabase - Main Script
Scrapes ESPN data and predicts NFL game winners using machine learning
Stores data in Supabase database
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from supabase import create_client, Client

class NFLPredictorSupabase:
    def __init__(self):
        # ESPN scraping setup
        self.base_url = "https://www.espn.com/nfl"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        # Supabase setup - ADD YOUR CREDENTIALS HERE
        self.supabase_url = "https://zesgcfngyxgabqhtozry.supabase.co"  # Replace with your Supabase URL
        self.supabase_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inplc2djZm5neXhnYWJxaHRvenJ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxNjIzNzIsImV4cCI6MjA3MzczODM3Mn0.SF-27QNEU7KJAA5oyjUEYpef30vseUgCaB-1P0QEM5k"  # Replace with your Supabase anon key
        
        # Initialize Supabase client
        try:
            self.supabase: Client = create_client(self.supabase_url, self.supabase_key)
            print("‚úÖ Connected to Supabase")
        except Exception as e:
            print(f"‚ùå Failed to connect to Supabase: {e}")
            self.supabase = None
        
        self.teams_data = pd.DataFrame()
        self.model = None
        
        # Create tables if they don't exist
        self.setup_database()
    
    def setup_database(self):
        """Create necessary tables in Supabase"""
        print("üîß Setting up database tables...")
        
        # Note: In Supabase, you typically create tables through the dashboard
        # or using SQL. Here's the SQL you would run in Supabase SQL editor:
        
        sql_commands = """
        -- Create team_stats table
        CREATE TABLE IF NOT EXISTS team_stats (
            id SERIAL PRIMARY KEY,
            team VARCHAR(50) NOT NULL,
            points_per_game DECIMAL(5,2),
            points_allowed DECIMAL(5,2),
            yards_per_game DECIMAL(6,2),
            yards_allowed DECIMAL(6,2),
            turnovers DECIMAL(4,2),
            wins INTEGER,
            losses INTEGER,
            created_at TIMESTAMP DEFAULT NOW(),
            season INTEGER DEFAULT 2024
        );
        
        -- Create predictions table
        CREATE TABLE IF NOT EXISTS predictions (
            id SERIAL PRIMARY KEY,
            home_team VARCHAR(50) NOT NULL,
            away_team VARCHAR(50) NOT NULL,
            predicted_winner VARCHAR(50),
            confidence DECIMAL(5,2),
            week INTEGER,
            prediction_date TIMESTAMP DEFAULT NOW(),
            actual_winner VARCHAR(50),
            correct_prediction BOOLEAN
        );
        
        -- Create games table
        CREATE TABLE IF NOT EXISTS games (
            id SERIAL PRIMARY KEY,
            home_team VARCHAR(50) NOT NULL,
            away_team VARCHAR(50) NOT NULL,
            home_score INTEGER,
            away_score INTEGER,
            week INTEGER,
            season INTEGER DEFAULT 2024,
            game_date DATE,
            winner VARCHAR(50)
        );
        """
        
        print("üìã Run this SQL in your Supabase SQL editor:")
        print("=" * 50)
        print(sql_commands)
        print("=" * 50)
    
    def save_team_stats_to_supabase(self, teams_data):
        """Save team statistics to Supabase"""
        if not self.supabase:
            print("‚ùå No Supabase connection")
            return False
        
        try:
            print("üíæ Saving team stats to Supabase...")
            
            # Convert DataFrame to list of dictionaries
            teams_list = teams_data.to_dict('records')
            
            # Insert data into Supabase
            result = self.supabase.table('team_stats').insert(teams_list).execute()
            
            print(f"‚úÖ Saved {len(teams_list)} team stats to Supabase")
            return True
            
        except Exception as e:
            print(f"‚ùå Error saving team stats: {e}")
            return False
    
    def save_predictions_to_supabase(self, predictions):
        """Save predictions to Supabase"""
        if not self.supabase:
            print("‚ùå No Supabase connection")
            return False
        
        try:
            print("üíæ Saving predictions to Supabase...")
            
            # Convert predictions to the right format
            predictions_list = []
            for pred in predictions:
                predictions_list.append({
                    'home_team': pred['home_team'],
                    'away_team': pred['away_team'],
                    'predicted_winner': pred['predicted_winner'],
                    'confidence': pred['confidence'],
                    'week': pred['week']
                })
            
            # Insert into Supabase
            result = self.supabase.table('predictions').insert(predictions_list).execute()
            
            print(f"‚úÖ Saved {len(predictions_list)} predictions to Supabase")
            return True
            
        except Exception as e:
            print(f"‚ùå Error saving predictions: {e}")
            return False
    
    def load_team_stats_from_supabase(self):
        """Load team statistics from Supabase"""
        if not self.supabase:
            print("‚ùå No Supabase connection")
            return False
        
        try:
            print("üìñ Loading team stats from Supabase...")
            
            result = self.supabase.table('team_stats').select("*").execute()
            
            if result.data:
                self.teams_data = pd.DataFrame(result.data)
                print(f"‚úÖ Loaded {len(self.teams_data)} team records from Supabase")
                return True
            else:
                print("‚ö†Ô∏è No team stats found in Supabase")
                return False
                
        except Exception as e:
            print(f"‚ùå Error loading team stats: {e}")
            return False
    
    def get_predictions_from_supabase(self):
        """Get predictions from Supabase"""
        if not self.supabase:
            print("‚ùå No Supabase connection")
            return []
        
        try:
            result = self.supabase.table('predictions').select("*").order('prediction_date.desc').execute()
            return result.data
        except Exception as e:
            print(f"‚ùå Error getting predictions: {e}")
            return []
    
    def scrape_team_stats(self):
        """Scrape team statistics from ESPN"""
        print("üèà Scraping team statistics...")
        
        try:
            # Get team stats page
            stats_url = f"{self.base_url}/stats/team"
            response = requests.get(stats_url, headers=self.headers)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            teams = []
            
            # NFL teams list
            nfl_teams = [
                'Arizona Cardinals', 'Atlanta Falcons', 'Baltimore Ravens', 'Buffalo Bills',
                'Carolina Panthers', 'Chicago Bears', 'Cincinnati Bengals', 'Cleveland Browns',
                'Dallas Cowboys', 'Denver Broncos', 'Detroit Lions', 'Green Bay Packers',
                'Houston Texans', 'Indianapolis Colts', 'Jacksonville Jaguars', 'Kansas City Chiefs',
                'Las Vegas Raiders', 'Los Angeles Chargers', 'Los Angeles Rams', 'Miami Dolphins',
                'Minnesota Vikings', 'New England Patriots', 'New Orleans Saints', 'New York Giants',
                'New York Jets', 'Philadelphia Eagles', 'Pittsburgh Steelers', 'San Francisco 49ers',
                'Seattle Seahawks', 'Tampa Bay Buccaneers', 'Tennessee Titans', 'Washington Commanders'
            ]
            
            for team in nfl_teams:
                # Generate sample stats (replace with real scraping)
                team_stats = {
                    'team': team,
                    'points_per_game': round(np.random.uniform(18, 32), 2),
                    'points_allowed': round(np.random.uniform(18, 32), 2),
                    'yards_per_game': round(np.random.uniform(300, 450), 2),
                    'yards_allowed': round(np.random.uniform(300, 450), 2),
                    'turnovers': round(np.random.uniform(-10, 10), 2),
                    'wins': np.random.randint(0, 17),
                    'losses': np.random.randint(0, 17),
                    'season': 2024
                }
                teams.append(team_stats)
            
            self.teams_data = pd.DataFrame(teams)
            print(f"‚úÖ Scraped data for {len(teams)} teams")
            
            # Save to Supabase
            self.save_team_stats_to_supabase(self.teams_data)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error scraping team stats: {e}")
            return False
    
    def scrape_schedule(self):
        """Scrape upcoming games schedule"""
        print("üìÖ Scraping upcoming games...")
        
        try:
            # Sample upcoming games
            upcoming_games = [
                {'home_team': 'Kansas City Chiefs', 'away_team': 'Buffalo Bills', 'week': 15},
                {'home_team': 'Dallas Cowboys', 'away_team': 'Philadelphia Eagles', 'week': 15},
                {'home_team': 'Green Bay Packers', 'away_team': 'Detroit Lions', 'week': 15},
                {'home_team': 'San Francisco 49ers', 'away_team': 'Los Angeles Rams', 'week': 15},
                {'home_team': 'Miami Dolphins', 'away_team': 'New York Jets', 'week': 15}
            ]
            
            self.upcoming_games = upcoming_games
            print(f"‚úÖ Found {len(upcoming_games)} upcoming games")
            return True
            
        except Exception as e:
            print(f"‚ùå Error scraping schedule: {e}")
            return False
    
    def create_features(self, home_team, away_team):
        """Create features for prediction model"""
        try:
            home_stats = self.teams_data[self.teams_data['team'] == home_team].iloc[0]
            away_stats = self.teams_data[self.teams_data['team'] == away_team].iloc[0]
            
            features = [
                home_stats['points_per_game'] - away_stats['points_per_game'],
                home_stats['points_allowed'] - away_stats['points_allowed'],
                home_stats['yards_per_game'] - away_stats['yards_per_game'],
                home_stats['yards_allowed'] - away_stats['yards_allowed'],
                home_stats['turnovers'] - away_stats['turnovers'],
                home_stats['wins'] - away_stats['wins'],
                1  # Home field advantage
            ]
            
            return features
        except Exception as e:
            print(f"‚ùå Error creating features: {e}")
            return None
    
    def train_model(self):
        """Train the prediction model"""
        print("ü§ñ Training prediction model...")
        
        # Create training data
        training_data = []
        training_labels = []
        
        # Generate sample games with outcomes
        for _ in range(100):
            teams = self.teams_data.sample(2)
            home_team = teams.iloc[0]['team']
            away_team = teams.iloc[1]['team']
            
            features = self.create_features(home_team, away_team)
            if features:
                training_data.append(features)
                home_advantage = features[0] + features[5] + features[6]
                training_labels.append(1 if home_advantage > 0 else 0)
        
        # Train model
        X_train, X_test, y_train, y_test = train_test_split(
            training_data, training_labels, test_size=0.2, random_state=42
        )
        
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        self.model.fit(X_train, y_train)
        
        # Test accuracy
        y_pred = self.model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        
        print(f"‚úÖ Model trained! Accuracy: {accuracy:.2%}")
        return True
    
    def predict_games(self):
        """Predict outcomes for upcoming games"""
        print("\nüîÆ Making predictions for upcoming games...")
        print("=" * 60)
        
        predictions = []
        
        for game in self.upcoming_games:
            home_team = game['home_team']
            away_team = game['away_team']
            
            features = self.create_features(home_team, away_team)
            if features and self.model:
                prediction = self.model.predict([features])[0]
                confidence = self.model.predict_proba([features])[0]
                
                winner = home_team if prediction == 1 else away_team
                win_probability = max(confidence) * 100
                
                predictions.append({
                    'home_team': home_team,
                    'away_team': away_team,
                    'predicted_winner': winner,
                    'confidence': win_probability,
                    'week': game['week']
                })
                
                print(f"üèà {away_team} @ {home_team}")
                print(f"   üèÜ Predicted Winner: {winner}")
                print(f"   üìä Confidence: {win_probability:.1f}%")
                print(f"   üìÖ Week: {game['week']}")
                print("-" * 40)
        
        # Save predictions to Supabase
        self.save_predictions_to_supabase(predictions)
        
        return predictions
    
    def run_full_prediction(self):
        """Run the complete prediction pipeline"""
        print("üöÄ Starting NFL Prediction System with Supabase")
        print("=" * 60)
        
        # Try to load existing data first
        if not self.load_team_stats_from_supabase():
            # If no data exists, scrape new data
            if not self.scrape_team_stats():
                return False
        
        # Scrape schedule
        if not self.scrape_schedule():
            return False
        
        # Train model
        if not self.train_model():
            return False
        
        # Make predictions
        predictions = self.predict_games()
        
        print("\n‚úÖ Prediction pipeline completed successfully!")
        print(f"üóÑÔ∏è Data stored in Supabase database")
        
        return True

def main():
    """Main function to run the NFL predictor"""
    print("üîß Make sure to add your Supabase credentials to the code!")
    print("üîß Also run the SQL commands in your Supabase dashboard first!")
    print()
    
    predictor = NFLPredictorSupabase()
    
    try:
        predictor.run_full_prediction()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Process interrupted by user")
    except Exception as e:
        print(f"\n‚ùå An error occurred: {e}")

if __name__ == "__main__":
    main()
